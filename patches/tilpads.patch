From fd611035c4de36d7ae2d6f12c2052ffbf2e53f41 Mon Sep 17 00:00:00 2001
From: Sivecano <sivecano@gmail.com>
Date: Sat, 22 Feb 2025 01:45:17 +0100
Subject: [PATCH] tiling-scratchpads

---
 config.def.h |  12 ++++--
 dwl.c        | 107 ++++++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 114 insertions(+), 5 deletions(-)

diff --git a/config.def.h b/config.def.h
index 22d2171..3f40015 100644
--- a/config.def.h
+++ b/config.def.h
@@ -7,6 +7,7 @@
 static const int sloppyfocus               = 1;  /* focus follows mouse */
 static const int bypass_surface_visibility = 0;  /* 1 means idle inhibitors will disable idle tracking even if it's surface isn't visible  */
 static const unsigned int borderpx         = 1;  /* border pixel of windows */
+static const float scratchfactor           = 0.9f; /* scaling factor of scratchpad */
 static const float rootcolor[]             = COLOR(0x222222ff);
 static const float bordercolor[]           = COLOR(0x444444ff);
 static const float focuscolor[]            = COLOR(0x005577ff);
@@ -22,10 +23,11 @@ static int log_level = WLR_ERROR;
 
 /* NOTE: ALWAYS keep a rule declared even if you don't use rules (e.g leave at least one example) */
 static const Rule rules[] = {
-	/* app_id             title       tags mask     isfloating   monitor */
+	/* app_id             title         tags mask     isfloating   monitor scratchkey */
 	/* examples: */
-	{ "Gimp_EXAMPLE",     NULL,       0,            1,           -1 }, /* Start on currently visible tags floating, not tiled */
-	{ "firefox_EXAMPLE",  NULL,       1 << 8,       0,           -1 }, /* Start on ONLY tag "9" */
+	{ "Gimp_EXAMPLE",     NULL,         0,            1,           -1,     0   }, /* Start on currently visible tags floating, not tiled */
+	{ "firefox_EXAMPLE",  NULL,         1 << 8,       0,           -1,     0   }, /* Start on ONLY tag "9" */
+	{ NULL,               "scratchpad", 0,            1,           -1,     's' },
 };
 
 /* layout(s) */
@@ -122,11 +124,15 @@ static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TA
 static const char *termcmd[] = { "foot", NULL };
 static const char *menucmd[] = { "wmenu-run", NULL };
 
+/* named scratchpads - First arg only serves to match against key in rules*/
+static const char *scratchpadcmd[] = { "s", "foot", NULL };
+
 static const Key keys[] = {
 	/* Note that Shift changes certain key codes: c -> C, 2 -> at, etc. */
 	/* modifier                  key                 function        argument */
 	{ MODKEY,                    XKB_KEY_p,          spawn,          {.v = menucmd} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Return,     spawn,          {.v = termcmd} },
+	{ 0,                         XKB_KEY_F10,        focusortogglescratch,  {.v = &scratchpadcmd } },
 	{ MODKEY,                    XKB_KEY_j,          focusstack,     {.i = +1} },
 	{ MODKEY,                    XKB_KEY_k,          focusstack,     {.i = -1} },
 	{ MODKEY,                    XKB_KEY_i,          incnmaster,     {.i = +1} },
diff --git a/dwl.c b/dwl.c
index def2562..db4585a 100644
--- a/dwl.c
+++ b/dwl.c
@@ -73,7 +73,8 @@
 #define MAX(A, B)               ((A) > (B) ? (A) : (B))
 #define MIN(A, B)               ((A) < (B) ? (A) : (B))
 #define CLEANMASK(mask)         (mask & ~WLR_MODIFIER_CAPS)
-#define VISIBLEON(C, M)         ((M) && (C)->mon == (M) && ((C)->tags & (M)->tagset[(M)->seltags]))
+#define VISIBLEON(C, M)         ((M) && ((!(M)->wlr_output && (C)->scratchkey != 0 && (C)->scratchkey == current_scratch) \
+                                         || ((C)->mon == (M) && ((C)->tags & (M)->tagset[(M)->seltags]))))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
 #define END(A)                  ((A) + LENGTH(A))
 #define TAGMASK                 ((1u << TAGCOUNT) - 1)
@@ -140,6 +141,7 @@ typedef struct {
 	unsigned int bw;
 	uint32_t tags;
 	int isfloating, isurgent, isfullscreen;
+	char scratchkey;
 	uint32_t resize; /* configure serial of a pending resize */
 } Client;
 
@@ -231,6 +233,7 @@ typedef struct {
 	uint32_t tags;
 	int isfloating;
 	int monitor;
+	const char scratchkey;
 } Rule;
 
 typedef struct {
@@ -287,6 +290,7 @@ static void destroykeyboardgroup(struct wl_listener *listener, void *data);
 static Monitor *dirtomon(enum wlr_direction dir);
 static void focusclient(Client *c, int lift);
 static void focusmon(const Arg *arg);
+static void focusortogglescratch(const Arg *arg);
 static void focusstack(const Arg *arg);
 static Client *focustop(Monitor *m);
 static void fullscreennotify(struct wl_listener *listener, void *data);
@@ -334,12 +338,14 @@ static void setpsel(struct wl_listener *listener, void *data);
 static void setsel(struct wl_listener *listener, void *data);
 static void setup(void);
 static void spawn(const Arg *arg);
+static void spawnscratch(const Arg *arg);
 static void startdrag(struct wl_listener *listener, void *data);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *m);
 static void togglefloating(const Arg *arg);
 static void togglefullscreen(const Arg *arg);
+static void togglescratch(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
 static void unlocksession(struct wl_listener *listener, void *data);
@@ -413,6 +419,9 @@ static struct wlr_box sgeom;
 static struct wl_list mons;
 static Monitor *selmon;
 
+static char current_scratch;
+static pid_t next_scratch;
+
 #ifdef XWAYLAND
 static void activatex11(struct wl_listener *listener, void *data);
 static void associatex11(struct wl_listener *listener, void *data);
@@ -457,10 +466,14 @@ applyrules(Client *c)
 	const char *appid, *title;
 	uint32_t newtags = 0;
 	int i;
+	pid_t pid;
 	const Rule *r;
 	Monitor *mon = selmon, *m;
 
+	wl_client_get_credentials(c->surface.xdg->client->client, &pid, NULL, NULL);
+
 	c->isfloating = client_is_float_type(c);
+	c->scratchkey = current_scratch;
 	if (!(appid = client_get_appid(c)))
 		appid = broken;
 	if (!(title = client_get_title(c)))
@@ -470,6 +483,8 @@ applyrules(Client *c)
 		if ((!r->title || strstr(title, r->title))
 				&& (!r->id || strstr(appid, r->id))) {
 			c->isfloating = r->isfloating;
+			if (r->scratchkey != 0)
+    			c->scratchkey = r->scratchkey;
 			newtags |= r->tags;
 			i = 0;
 			wl_list_for_each(m, &mons, link) {
@@ -478,6 +493,8 @@ applyrules(Client *c)
 			}
 		}
 	}
+	if (pid == next_scratch)
+    	c->scratchkey = current_scratch;
 	setmon(c, mon, newtags);
 }
 
@@ -485,11 +502,24 @@ void
 arrange(Monitor *m)
 {
 	Client *c;
+	Monitor scratchmon = *m;
+	scratchmon.tagset[0] = 0;
+	scratchmon.tagset[1] = 0;
+	scratchmon.wlr_output = NULL;
+	scratchmon.w.x += (int)(scratchmon.w.width * (1 - scratchfactor)/2);
+	scratchmon.w.y += (int)(scratchmon.w.height * (1 - scratchfactor)/2);
+	scratchmon.w.width = (int)(scratchmon.w.width * scratchfactor);
+	scratchmon.w.height = (int)(scratchmon.w.height * scratchfactor);
 
 	if (!m->wlr_output->enabled)
 		return;
 
 	wl_list_for_each(c, &clients, link) {
+    	if (c->scratchkey != 0) {
+        	c->mon = &scratchmon;
+            wlr_scene_node_set_enabled(&c->scene->node, c->scratchkey == current_scratch);
+            client_set_suspended(c, c->scratchkey != current_scratch);
+    	}
 		if (c->mon == m) {
 			wlr_scene_node_set_enabled(&c->scene->node, VISIBLEON(c, m));
 			client_set_suspended(c, !VISIBLEON(c, m));
@@ -515,8 +545,17 @@ arrange(Monitor *m)
 								: c->scene->node.parent);
 	}
 
-	if (m->lt[m->sellt]->arrange)
+	if (m->lt[m->sellt]->arrange) {
 		m->lt[m->sellt]->arrange(m);
+		m->lt[m->sellt]->arrange(&scratchmon);
+	}
+
+    wl_list_for_each(c, &clients, link) 
+        if (c->mon == &scratchmon) {
+            c->mon = m;
+            wlr_scene_node_reparent(&c->scene->node, layers[LyrFloat]);
+        }
+
 	motionnotify(0, NULL, 0, 0, 0, 0);
 	checkidleinhibitor(NULL);
 }
@@ -1425,6 +1464,57 @@ focusmon(const Arg *arg)
 	focusclient(focustop(selmon), 1);
 }
 
+void
+focusortogglescratch(const Arg *arg)
+{
+	Client *c;
+    const char next = ((char**)arg->v)[0][0];
+    unsigned int off = next == current_scratch;
+
+    if (((c = focustop(selmon)) && c->scratchkey == next) || current_scratch != next)
+    {
+            togglescratch(arg);
+            focusclient(NULL, 0);
+    }
+
+    if (current_scratch == 0)
+        return;
+
+	wl_list_for_each(c, &clients, link)
+    	if (c->scratchkey == current_scratch) {
+            focusclient(c, 0);
+            return;
+    	}
+
+    if (off) current_scratch = 0;
+}
+
+void
+togglescratch(const Arg *arg)
+{
+	Client *c;
+    const char next = ((char**)arg->v)[0][0];
+	unsigned int found = 0;
+
+    current_scratch = current_scratch == next ? 0 : next;
+
+	wl_list_for_each(c, &clients, link) {
+        if (c->scratchkey == current_scratch) {
+            found = 1;
+            c->tags = selmon ->tagset[selmon->seltags];
+        }
+        if (c->scratchkey == next && current_scratch == 0)
+        {
+            c->tags = 0;
+        }
+	}
+
+    if (!found && current_scratch)
+        spawnscratch(arg);
+    else
+        arrange(selmon);
+}
+
 void
 focusstack(const Arg *arg)
 {
@@ -2658,6 +2748,19 @@ spawn(const Arg *arg)
 	}
 }
 
+void spawnscratch(const Arg *arg)
+{
+    if (next_scratch != 0 && kill(next_scratch, 0) == 0)
+        return;
+
+	if (fork() == 0) {
+		dup2(STDERR_FILENO, STDOUT_FILENO);
+		setsid();
+		execvp(((char **)arg->v)[1], ((char **)arg->v)+1);
+		die("dwl: execvp %s failed:", ((char **)arg->v)[1]);
+	}
+}
+
 void
 startdrag(struct wl_listener *listener, void *data)
 {
-- 
2.48.1

